the_day = "Weekday"
the_hour = 14
### checks capacity vs. demand at high level
source("Source/constraint check.R")
### prints summary
constraint_check_summary
### more detailed check of demand and capacity. needed for plot below and demand/capacity outputs
source("Source/demand check.R")
## plots demand vs. capacity
ggplot(data = compare2 %>% filter(Day==the_day),aes(Hour,demand,color=factor(Type))) +
geom_line() +
ggtitle(paste0(the_month," - ",the_day))
### Counts analysis: creates Weekday and Weekend count compare outputs
if(project == "winooski_city"){
source(paste(dir,"Source/win_city_counts.R", sep="/"))
}
if(project == "winooski_ave"){
source(paste(dir,"Source/win_ave_counts.R"))
}
source("Source/counts_analysis.R")
### Capacity vs. Demand for desired hour: Creates Capacity vs. Demand output
# d2 is created in demand check and is total demand for hour/day/month combo
cap_vs_demand = d2 %>%
left_join(parking %>% select(LOT_UID,LOT_NAME)) %>%
group_by(LOT_UID,LOT_NAME,Category) %>%
summarise(capacity = mean(SPACE_TOT)
,demand = sum(demand)
,overcapacity =ifelse(demand>capacity,demand-capacity,0)) %>%
arrange(desc(overcapacity))
#### ON STREET SHARE for desired output: Creates on-street share output
## select the Land Use code of interest.
## Use the Land Use codes in the Parking Demand and Adjustments Excel file.
on_street = demand %>%
left_join(park_info) %>%
mutate(LU_Type = ifelse(LUC %in% c(50,51),"Residential_Demand","Commercial_Demand")) %>%
filter(Day==the_day,Month==the_month) %>%
group_by(Hour,LU_Type) %>%
summarize(On_Street = sum(demand*(Category %in% c("On Street","on street")))
,total=sum(demand)
,On_street_share = sum(demand*(Category %in% c("On Street","on street")))/sum(demand)) %>%
pivot_wider(names_from=LU_Type,values_from=c(On_Street,total,On_street_share))
#Step 5: Writing to Excel for analysis and visualization
# ##################### #
##### WRITE TO XLSX #####
# ##################### #
# will write an xlsx file with all check outputs to project outputs folder with
# name including scenario, day and hour
output = list(timeseries= results
,parking_formatted = parking
#              ,Weekday_Count = wd_compare_output
#              ,Weekend_Count = we_compare_output
,Unconstrained_Demand = demand_check_output
,Capacity_and_Demand = constraint_check_output
,Capacity_by_lot = cap_vs_demand
,On_Street_Share = on_street)
write.xlsx(output,paste0(outputs,"\\",scen_name,"_checks_",the_day,the_hour,".xlsx"),overwrite=TRUE)
#Author: RSG. Aaron Lee
#Date: July 2021
#version 1.0
#This script extracts data from the analysis completed in the python scripting Shared Parking analysis
#Step 1: Load Packages
# ##################### #
##### LOAD PACKAGES #####
# ##################### #
rm(list = ls())
library(tidyverse)
library(readxl)
library(openxlsx)
library(sp)
library(rgdal)
#Step 2: Define the Project. The project name is used to manage the source of files.
# ###################### #
##### DEFINE PROJECT #####
# ###################### #
#project = "winooski_ave", "winooski_city", toggle these for project type
project = "winooski_city"
#Step 3: Inputs to select the analysis data
# Scenario Name (point this to the output folder from the python script)
scen_name = "output"
# Demand and Adjustments File Used in Scenario. This is the Shared Parking Excel data file
factors_used = "Parking Demand and Adjustments3"
# Parking (Supply) Shapefile Used (in github parent folder  /data )
#supply_shp = "Supply_Small2"
supply_shp = "WinCity_BaseCalibration_Supply"
#supply_shp = "WinCity_NearTerm_Sc1_parking"
#supply_shp = "Winooski_Parking"
# Generator (Demand) Shapefile used (in github parent folder  /data )
#demand_shp = "Demand_small2"
demand_shp = "WinCity_Calibratedbased"
#demand_shp = "WinCity_NearTerm_Sc1"
#demand_shp = "Winooski_Generators"
##### Data directories for each project
### model_dir = parent directory for python script, where output files are stored
### dir = directory for desired outputs or any non-python related inputs (likely not
### needed anymore), substitute own directory
##### WIN CITY #####
if(project == "winooski_city"){
dir = "C:\\Shared_Parking\\Calibration Comparison and Processing"
model_dir = "C:\\Shared_Parking\\WinCityTests\\tests\\base"
}
##### WIN AVE #####
if(project == "winooski_ave"){
dir = "C:/GitHub/shared_parking/WinAveTests/DemandOut"
model_dir = "C:/WINCity task/shared_parking/WinAveTests/future_3"
}
## input and output directory names for dir (not python model inputs/outputs)
inputs = paste(dir,"Inputs",sep="/")
outputs = paste(dir,"Outputs",sep="/")
#Step 3: Reading the Data
# ################# #
##### READ DATA #####
# ################# #
# python outputs for the scenario
results = read_csv(paste(model_dir,scen_name,"timeseries.csv",sep="\\"))
demand = read_csv(paste(model_dir,scen_name,"demand.csv",sep="\\"))
factors = read_csv(paste(model_dir,scen_name,"factors.csv",sep="\\"))
### Parking and categories and generator list
# reads shapefiles from the python data directory.
# these are the inputs that were used for the model run.
# The file should find the above referenced directories for data.
source("Source/read_shapefiles.R")
#Step 4: Analysis of the Parking Data
# #################################### #
##### ANALYSIS and OUTPUT CREATION #####
# #################################### #
### Day and Time to use for analysis
the_month = "Sep"
the_day = "Weekday"
the_hour = 14
### checks capacity vs. demand at high level
source("Source/constraint check.R")
### prints summary
constraint_check_summary
### more detailed check of demand and capacity. needed for plot below and demand/capacity outputs
source("Source/demand check.R")
## plots demand vs. capacity
ggplot(data = compare2 %>% filter(Day==the_day),aes(Hour,demand,color=factor(Type))) +
geom_line() +
ggtitle(paste0(the_month," - ",the_day))
### Counts analysis: creates Weekday and Weekend count compare outputs
if(project == "winooski_city"){
source(paste(dir,"Source/win_city_counts.R", sep="/"))
}
if(project == "winooski_ave"){
source(paste(dir,"Source/win_ave_counts.R"))
}
source("Source/counts_analysis.R")
### Capacity vs. Demand for desired hour: Creates Capacity vs. Demand output
# d2 is created in demand check and is total demand for hour/day/month combo
cap_vs_demand = d2 %>%
left_join(parking %>% select(LOT_UID,LOT_NAME)) %>%
group_by(LOT_UID,LOT_NAME,Category) %>%
summarise(capacity = mean(SPACE_TOT)
,demand = sum(demand)
,overcapacity =ifelse(demand>capacity,demand-capacity,0)) %>%
arrange(desc(overcapacity))
#### ON STREET SHARE for desired output: Creates on-street share output
## select the Land Use code of interest.
## Use the Land Use codes in the Parking Demand and Adjustments Excel file.
on_street = demand %>%
left_join(park_info) %>%
mutate(LU_Type = ifelse(LUC %in% c(50,51),"Residential_Demand","Commercial_Demand")) %>%
filter(Day==the_day,Month==the_month) %>%
group_by(Hour,LU_Type) %>%
summarize(On_Street = sum(demand*(Category %in% c("On Street","on street")))
,total=sum(demand)
,On_street_share = sum(demand*(Category %in% c("On Street","on street")))/sum(demand)) %>%
pivot_wider(names_from=LU_Type,values_from=c(On_Street,total,On_street_share))
#Step 5: Writing to Excel for analysis and visualization
# ##################### #
##### WRITE TO XLSX #####
# ##################### #
# will write an xlsx file with all check outputs to project outputs folder with
# name including scenario, day and hour
output = list(timeseries= results
,parking_formatted = parking
#              ,Weekday_Count = wd_compare_output
#              ,Weekend_Count = we_compare_output
,Unconstrained_Demand = demand_check_output
,Capacity_and_Demand = constraint_check_output
,Capacity_by_lot = cap_vs_demand
,On_Street_Share = on_street)
write.xlsx(output,paste0(outputs,"\\",scen_name,"_checks_",the_day,the_hour,".xlsx"),overwrite=TRUE)
# write.csv(parking,paste0(outputs,"/parking.csv"),row.names=FALSE)
# Script for updating visualization.xslx tabs
library(tidyverse)
library(openxlsx)
## This script will clear current data in visualization.xlsx tabs:
### timeseries and parking_formatted,
### with data from the appropriate CSV files.
# Adjust this folder where necessary
output_folder <- "baseoutput"
temp <- dirname(normalizePath(file.path("run_model.py")))
# Script for updating visualization.xslx tabs
library(tidyverse)
library(openxlsx)
## This script will clear current data in visualization.xlsx tabs:
### timeseries and parking_formatted,
### with data from the appropriate CSV files.
# Adjust this folder where necessary
output_folder <- "baseoutput"
temp <- dirname(getwd())
# Script for updating visualization.xslx tabs
library(tidyverse)
library(openxlsx)
## This script will clear current data in visualization.xlsx tabs:
### timeseries and parking_formatted,
### with data from the appropriate CSV files.
# Adjust this folder where necessary
model_folder="WinCityTests"
output_folder <- "tests/base/baseoutput"
temp <- dirname(getwd())
timeseries <- read.csv(paste(temp, model_folder, output_folder, "timeseries.csv", sep="/"))
parking2 <- parking %>% data.frame()
viz <- loadWorkbook(paste(temp, "visualization.xlsx", sep="/"))
sheet <- getSheet(viz, "timeseries")
View(timeseries)
# Script for updating visualization.xslx tabs
library(tidyverse)
library(openxlsx)
## This script will clear current data in visualization.xlsx tabs:
### timeseries and parking_formatted,
### with data from the appropriate CSV files.
# Adjust these folder directories where necessary to get correct file
model_folder="WinCityTests"
output_folder <- "tests/base/baseoutput"
temp <- dirname(getwd())
timeseries <- read.csv(paste(temp, model_folder, output_folder, "timeseries.csv", sep="/"))
# Parking shapefile already processed
parking2 <- parking %>% data.frame()
# Load workbook
viz <- loadWorkbook(paste(temp, "visualization.xlsx", sep="/"))
write.xlsx(timeseries, "visualization.xlsx", sheetName="timeseries",
startRow=1, startCol=1, colNames=T)
write.xlsx(parking2, "visualization.xlsx", sheetName="parking_formatted",
startRow=1, startCol=1, colNames=T)
saveWorkbook(viz, "visualization.xlsx", overwrite = T)
# Script for updating visualization.xslx tabs
library(tidyverse)
library(openxlsx)
## This script will clear current data in visualization.xlsx tabs:
### timeseries and parking_formatted,
### with data from the appropriate CSV files.
# Adjust these folder directories where necessary to get correct file
model_folder="WinCityTests"
output_folder <- "tests/base/baseoutput"
temp <- dirname(getwd())
timeseries <- read.csv(paste(temp, model_folder, output_folder, "timeseries.csv", sep="/")) %>%
mutate(demand==0) %>%
mutate(frac_full==0)
# Parking shapefile already processed
parking2 <- parking %>% data.frame()
# Load workbook
viz <- loadWorkbook(paste(temp, "visualization.xlsx", sep="/"))
write.xlsx(timeseries, "visualization.xlsx", sheetName="timeseries",
startRow=1, startCol=1, colNames=T)
write.xlsx(parking2, "visualization.xlsx", sheetName="parking_formatted",
startRow=1, startCol=1, colNames=T)
saveWorkbook(viz, "visualization.xlsx", overwrite = T)
# Script for updating visualization.xslx tabs
library(tidyverse)
library(openxlsx)
## This script will clear current data in visualization.xlsx tabs:
### timeseries and parking_formatted,
### with data from the appropriate CSV files.
# Adjust these folder directories where necessary to get correct file
model_folder="WinCityTests"
output_folder <- "tests/base/baseoutput"
temp <- dirname(getwd())
timeseries <- read.csv(paste(temp, model_folder, output_folder, "timeseries.csv", sep="/")) %>%
mutate(demand==0) %>%
mutate(frac_full==0)
# Parking shapefile already processed
parking2 <- parking %>% data.frame()
# Load workbook
viz <- loadWorkbook("visualization.xlsx")
write.xlsx(timeseries, "visualization.xlsx", sheetName="timeseries",
startRow=1, startCol=1, colNames=T)
write.xlsx(parking2, "visualization.xlsx", sheetName="parking_formatted",
startRow=1, startCol=1, colNames=T)
saveWorkbook(viz, "visualization.xlsx", overwrite = T)
# Script for updating visualization.xslx tabs
library(tidyverse)
library(openxlsx)
## This script will clear current data in visualization.xlsx tabs:
### timeseries and parking_formatted,
### with data from the appropriate CSV files.
# Adjust these folder directories where necessary to get correct file
model_folder="WinCityTests"
output_folder <- "tests/base/baseoutput"
temp <- dirname(getwd())
timeseries <- read.csv(paste(temp, model_folder, output_folder, "timeseries.csv", sep="/")) %>%
mutate(demand==0) %>%
mutate(frac_full==0)
# Parking shapefile already processed
parking2 <- parking %>% data.frame()
# Load workbook
viz <- loadWorkbook("visualization.xlsx")
writeData(viz, sheet = "timeseries", x=timeseries)
writeData(viz, sheet = "timeseries", x=parking_formatted)
saveWorkbook(viz, "visualization.xlsx", overwrite = T)
# Script for updating visualization.xslx tabs
library(tidyverse)
library(openxlsx)
## This script will clear current data in visualization.xlsx tabs:
### timeseries and parking_formatted,
### with data from the appropriate CSV files.
# Adjust these folder directories where necessary to get correct file
model_folder="WinCityTests"
output_folder <- "tests/base/baseoutput"
temp <- dirname(getwd())
timeseries <- read.csv(paste(temp, model_folder, output_folder, "timeseries.csv", sep="/")) %>%
mutate(demand==0) %>%
mutate(frac_full==0)
# Parking shapefile already processed
parking2 <- parking %>% data.frame()
# Load workbook
viz <- loadWorkbook("visualization.xlsx")
writeData(viz, sheet = "timeseries", x=timeseries)
writeData(viz, sheet = "timeseries", x=parking_formatted)
saveWorkbook(viz, "visualization.xlsx", overwrite = T)
# Script for updating visualization.xslx tabs
library(tidyverse)
library(openxlsx)
## This script will clear current data in visualization.xlsx tabs:
### timeseries and parking_formatted,
### with data from the appropriate CSV files.
# Adjust these folder directories where necessary to get correct file
model_folder="WinCityTests"
output_folder <- "tests/base/baseoutput"
temp <- dirname(getwd())
timeseries <- read.csv(paste(temp, model_folder, output_folder, "timeseries.csv", sep="/")) %>%
mutate(demand==0) %>%
mutate(frac_full==0)
# Parking shapefile already processed
parking2 <- parking %>% data.frame()
# Load workbook
viz <- loadWorkbook("visualization.xlsx")
writeData(viz, sheet = "timeseries", x=timeseries)
writeData(viz, sheet = "parking_formatted", x=parking2)
saveWorkbook(viz, "visualization.xlsx", overwrite = T)
View(timeseries)
# Script for updating visualization.xslx tabs
library(tidyverse)
library(openxlsx)
## This script will clear current data in visualization.xlsx tabs:
### timeseries and parking_formatted,
### with data from the appropriate CSV files.
# Adjust these folder directories where necessary to get correct file
model_folder="WinCityTests"
output_folder <- "tests/base/baseoutput"
temp <- dirname(getwd())
timeseries <- read.csv(paste(temp, model_folder, output_folder, "timeseries.csv", sep="/"))
# Parking shapefile already processed
parking2 <- parking %>% data.frame()
# Load workbook
viz <- loadWorkbook("visualization.xlsx")
writeData(viz, sheet = "timeseries", x=timeseries)
writeData(viz, sheet = "parking_formatted", x=parking2)
saveWorkbook(viz, "visualization.xlsx", overwrite = T)
View(timeseries)
# Script for updating visualization.xslx tabs
library(tidyverse)
library(openxlsx)
## This script will clear current data in visualization.xlsx tabs:
### timeseries and parking_formatted,
### with data from the appropriate CSV files.
# Adjust these folder directories where necessary to get correct file
model_folder="WinCityTests"
output_folder <- "tests/base/baseoutput"
temp <- dirname(getwd())
timeseries <- read.csv(paste(temp, model_folder, output_folder, "timeseries.csv", sep="/"))
# Parking shapefile already processed
parking2 <- parking %>% data.frame()
# Load workbook
viz <- loadWorkbook("visualization.xlsx")
writeData(viz, sheet = "timeseries", x=timeseries)
writeData(viz, sheet = "parking_formatted", x=parking2)
saveWorkbook(viz, "visualization.xlsx", overwrite = T)
View(parking2)
#Author: RSG. Aaron Lee
#Date: July 2021
#version 1.0
#This script extracts data from the analysis completed in the python scripting Shared Parking analysis
#Step 1: Load Packages
# ##################### #
##### LOAD PACKAGES #####
# ##################### #
rm(list = ls())
library(tidyverse)
library(readxl)
library(openxlsx)
library(sp)
library(rgdal)
#Step 2: Define the Project. The project name is used to manage the source of files.
# ###################### #
##### DEFINE PROJECT #####
# ###################### #
#project = "winooski_ave", "winooski_city", toggle these for project type
project = "winooski_city"
#Step 3: Inputs to select the analysis data
# Scenario Name (point this to the output folder from the python script)
scen_name = "output"
# Demand and Adjustments File Used in Scenario. This is the Shared Parking Excel data file
factors_used = "Parking Demand and Adjustments3"
# Parking (Supply) Shapefile Used (in github parent folder  /data )
#supply_shp = "Supply_Small2"
supply_shp = "WinCity_BaseCalibration_Supply"
#supply_shp = "WinCity_NearTerm_Sc1_parking"
#supply_shp = "Winooski_Parking"
# Generator (Demand) Shapefile used (in github parent folder  /data )
#demand_shp = "Demand_small2"
demand_shp = "WinCity_Calibratedbased"
#demand_shp = "WinCity_NearTerm_Sc1"
#demand_shp = "Winooski_Generators"
##### Data directories for each project
### model_dir = parent directory for python script, where output files are stored
### dir = directory for desired outputs or any non-python related inputs (likely not
### needed anymore), substitute own directory
##### WIN CITY #####
if(project == "winooski_city"){
dir = "C:\\Shared_Parking\\Calibration Comparison and Processing"
model_dir = "C:\\Shared_Parking\\WinCityTests\\tests\\base"
}
##### WIN AVE #####
if(project == "winooski_ave"){
dir = "C:/GitHub/shared_parking/WinAveTests/DemandOut"
model_dir = "C:/WINCity task/shared_parking/WinAveTests/future_3"
}
## input and output directory names for dir (not python model inputs/outputs)
inputs = paste(dir,"Inputs",sep="/")
outputs = paste(dir,"Outputs",sep="/")
#Step 3: Reading the Data
# ################# #
##### READ DATA #####
# ################# #
# python outputs for the scenario
results = read_csv(paste(model_dir,scen_name,"timeseries.csv",sep="\\"))
demand = read_csv(paste(model_dir,scen_name,"demand.csv",sep="\\"))
factors = read_csv(paste(model_dir,scen_name,"factors.csv",sep="\\"))
### Parking and categories and generator list
# reads shapefiles from the python data directory.
# these are the inputs that were used for the model run.
# The file should find the above referenced directories for data.
source("Source/read_shapefiles.R")
#Step 4: Analysis of the Parking Data
# #################################### #
##### ANALYSIS and OUTPUT CREATION #####
# #################################### #
### Day and Time to use for analysis
the_month = "Sep"
the_day = "Weekday"
the_hour = 14
### checks capacity vs. demand at high level
source("Source/constraint check.R")
### prints summary
constraint_check_summary
### more detailed check of demand and capacity. needed for plot below and demand/capacity outputs
source("Source/demand check.R")
## plots demand vs. capacity
ggplot(data = compare2 %>% filter(Day==the_day),aes(Hour,demand,color=factor(Type))) +
geom_line() +
ggtitle(paste0(the_month," - ",the_day))
### Counts analysis: creates Weekday and Weekend count compare outputs
if(project == "winooski_city"){
source(paste(dir,"Source/win_city_counts.R", sep="/"))
}
if(project == "winooski_ave"){
source(paste(dir,"Source/win_ave_counts.R"))
}
source("Source/counts_analysis.R")
### Capacity vs. Demand for desired hour: Creates Capacity vs. Demand output
# d2 is created in demand check and is total demand for hour/day/month combo
cap_vs_demand = d2 %>%
left_join(parking %>% select(LOT_UID,LOT_NAME)) %>%
group_by(LOT_UID,LOT_NAME,Category) %>%
summarise(capacity = mean(SPACE_TOT)
,demand = sum(demand)
,overcapacity =ifelse(demand>capacity,demand-capacity,0)) %>%
arrange(desc(overcapacity))
#### ON STREET SHARE for desired output: Creates on-street share output
## select the Land Use code of interest.
## Use the Land Use codes in the Parking Demand and Adjustments Excel file.
on_street = demand %>%
left_join(park_info) %>%
mutate(LU_Type = ifelse(LUC %in% c(50,51),"Residential_Demand","Commercial_Demand")) %>%
filter(Day==the_day,Month==the_month) %>%
group_by(Hour,LU_Type) %>%
summarize(On_Street = sum(demand*(Category %in% c("On Street","on street")))
,total=sum(demand)
,On_street_share = sum(demand*(Category %in% c("On Street","on street")))/sum(demand)) %>%
pivot_wider(names_from=LU_Type,values_from=c(On_Street,total,On_street_share))
#Step 5: Writing to Excel for analysis and visualization
# ##################### #
##### WRITE TO XLSX #####
# ##################### #
# will write an xlsx file with all check outputs to project outputs folder with
# name including scenario, day and hour
output = list(timeseries= results
,parking_formatted = parking
#              ,Weekday_Count = wd_compare_output
#              ,Weekend_Count = we_compare_output
,Unconstrained_Demand = demand_check_output
,Capacity_and_Demand = constraint_check_output
,Capacity_by_lot = cap_vs_demand
,On_Street_Share = on_street)
write.xlsx(output,paste0(outputs,"\\",scen_name,"_checks_",the_day,the_hour,".xlsx"),overwrite=TRUE)
# Step 6: Updating the visualization file with new parking and timeseries info
### Adjust these model folder/names as necessary to create a path to the model and output
model_folder="WinCityTests"
output_folder <- "tests/base/baseoutput"
source("Source/save_visualization.R")
